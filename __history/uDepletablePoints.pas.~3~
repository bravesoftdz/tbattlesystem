{/***************************************************************************
                          uDepletablePoints.pas  -  description
                             -------------------
    begin                : Wed Jan 28 2014
    copyright            : (C) 2014 by Enrique Fuentes
    email                : deejaykike@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
 }

unit uDepletablePoints;

{/**Keeps track of a variable value with a maximum possible value. Archetypical example is
  hit points.
  */}

interface

type

TDepletablePoints = class(TObject)
  private
    pCurrent, pMaximum: Integer;
    procedure SetCurrent(const val: Integer);
    function GetCurrent: Integer;
    procedure SetMax(const val: Integer);
    function GetMax: Integer;
    procedure MakeValid;
  public
    constructor Create(const Val: Integer = 0); override; overload;
    constructor Create(const curr,max: Integer);
    function Change(const delta: Integer): Integer;
    property Current: Integer read GetCurrent write SetCurrent;
    property Max: Integer read GetMax write SetMax;
    function ChangeMax(const delta: Integer): Integer;
    procedure Become(const ref: TDepletablePoints);
    function IsPositive: Boolean;
    class operator Inc(const value: Integer); overload;
    class operator Dec(const value: Integer); overload;
    class operator Inc;
    class operator Dec;
    class operator LessOrEqual(const value: Integer): Boolean; overload;
    class operator LessOrEqual(DepletablePoints: TDepletablePoints): Boolean;
    class operator LessThan(const value: Integer): Boolean; overload;
    class operator LessThan(DepletablePoints: TDepletablePoints): Boolean;
    class operator Equal(const value: Integer): Boolean; overload;
    class operator Equal(DepletablePoints: TDepletablePoints): Boolean;
    class operator notEqual(const value: Integer): Boolean; overload;
    class operator notEqual(DepletablePoints: TDepletablePoints): Boolean;
    class operator GreaterOrEqual(const value: Integer): Boolean; overload;
    class operator GreaterOrEqual(DepletablePoints: TDepletablePoints): Boolean;
end;


implementation

constructor TDepletablePoints.Create;
begin
  inherited;
end;


end.
